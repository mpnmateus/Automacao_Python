from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
import keyboard
import time
import pyautogui
import os
from datetime import datetime

# Configurar as opções do Chrome
chrome_options = Options()
chrome_options.add_experimental_option("detach", True)  # Manter a janela aberta

# Instalar o driver do Chrome
servico = Service(ChromeDriverManager().install())

# Inicializar o navegador com as opções configuradas
navegador = webdriver.Chrome(service=servico, options=chrome_options)

# Maximizar a janela do navegador
navegador.maximize_window()

# Abrir a página desejada
navegador.get("https://app3.operand.com.br/arquivos")

# Preenchendo dados para login
navegador.find_element(By.XPATH, '//*[@id="email"]').send_keys("financeiro@agenciacondao.com.br")
navegador.find_element(By.XPATH, '//*[@id="password"]').send_keys("Financeiro@2023")

# Clicando em 'Entrar'
navegador.find_element(By.XPATH, '//*[@id="do-login"]').click()

# Esperar a página carregar (ajuste conforme necessário)
time.sleep(5)

# Função para selecionar datas dinamicamente
def selecionar_datas(navegador, data_inicio, data_fim):
    # Clicar no botão de filtro
    navegador.find_element(By.XPATH, '//*[@id="btn-filtros"]').click()
    
    # Esperar o campo de data ficar visível
    time.sleep(2)
    
    # Clicar no campo de data para abrir o seletor de datas
    navegador.find_element(By.XPATH, '//*[@id="find_date"]').click()
    
    # Esperar o seletor de datas aparecer
    time.sleep(2)
    
    # Selecionar a opção "Personalizado"
    navegador.find_element(By.XPATH, '/html/body/div[5]/div[3]/ul/li[5]').click()
    
    # Esperar o campo de data personalizado ficar visível
    time.sleep(2)
    
    # Selecionar a data de início
    ano_inicio = data_inicio.year
    mes_inicio = data_inicio.strftime("%B")  # Nome completo do mês em inglês
    dia_inicio = data_inicio.day
    
    Select(navegador.find_element(By.XPATH, '/html/body/div[5]/div[1]/div[2]/table/thead/tr[1]/th[2]/select[2]')).select_by_visible_text(str(ano_inicio))
    Select(navegador.find_element(By.XPATH, '/html/body/div[5]/div[1]/div[2]/table/thead/tr[1]/th[2]/select[1]')).select_by_value(str(data_inicio.month - 1))
    navegador.find_element(By.XPATH, f"/html/body/div[5]/div[1]/div[2]/table/tbody/tr[1]/td[5]").click()
    
    # Selecionar a data de fim
    ano_fim = data_fim.year
    mes_fim = data_fim.strftime("%B")
    dia_fim = data_fim.day
    
    Select(navegador.find_element(By.XPATH, '/html/body/div[5]/div[2]/div[2]/table/thead/tr[1]/th[2]/select[2]')).select_by_visible_text(str(ano_fim))
    Select(navegador.find_element(By.XPATH, '/html/body/div[5]/div[2]/div[2]/table/thead/tr[1]/th[2]/select[1]')).select_by_value(str(data_fim.month - 1))
    navegador.find_element(By.XPATH, f"/html/body/div[5]/div[2]/div[2]/table/tbody/tr[5]/td[7]").click()
    
    # Confirmar a seleção das datas
    navegador.find_element(By.CSS_SELECTOR, 'body > div.daterangepicker.dropdown-menu.opensright.show-calendar > div.ranges > div > button.applyBtn.btn.btn-sm.btn-success').click()
    
    # Esperar para garantir que a seleção de datas foi confirmada
    time.sleep(2)
    
    # Clicar no botão "Buscar"
    navegador.find_element(By.XPATH, '//*[@id="btn-filtrar"]').click()
    
    # Esperar a página recarregar com os novos filtros
    time.sleep(5)

# Função para rolar a página até o final
def rolar_ate_fim_pagina(driver):
    prev_height = driver.execute_script("return document.body.scrollHeight")
    while True:
        driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.END)
        time.sleep(2)  # Ajuste o tempo conforme necessário
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == prev_height:
            break
        prev_height = new_height

# Função para salvar arquivos PDF usando PyAutoGUI
def salvar_pdf(destino, contador):
    time.sleep(4)  # Esperar um momento para garantir que a página esteja carregada
    pyautogui.hotkey('ctrl', 's')  # Pressionar Ctrl+S para abrir a janela de salvar
    time.sleep(2)  # Esperar a janela abrir
    
    # Coordenadas do campo do diretório e botão salvar
    campo_diretorio_x, campo_diretorio_y = 648, 205  # Coordenadas definição diretorio
    campo_salvar_x, campo_salvar_y = 776, 636  # Coordenadas botão salvar
    
    # Mover para o campo do diretório e colar o destino
    pyautogui.click(campo_diretorio_x, campo_diretorio_y)
    pyautogui.typewrite(destino)  # Escrever o caminho do diretório
    pyautogui.press('enter')  # Confirmar o diretório
    time.sleep(2)  # Esperar um momento para o diretório ser confirmado
    
    #Salva o arquivo
    pyautogui.click(campo_salvar_x, campo_salvar_y)
    time.sleep(2)
    
    """
    # Nome do arquivo
    nome_arquivo = f"arquivo_{contador}.pdf"
    pyautogui.typewrite(nome_arquivo)
    pyautogui.press('enter')  # Salvar o arquivo
    time.sleep(2)
    """

# Função principal
def main():
    # Definir as datas de início e fim
    data_inicio = datetime(2021, 1, 1)
    data_fim = datetime(2021, 1, 31)
    
    try:
        selecionar_datas(navegador, data_inicio, data_fim)
        rolar_ate_fim_pagina(navegador)
        
        # Verificar todos os links de arquivos PDF
        arquivos_pdf = navegador.find_elements(By.XPATH, '//div[@class="mini-holder other-files pdf"]/..')
        
        destino = r'C:\Users\mateu\Desktop\Anexos OPERAND\Downloads_automacao'
        
        for contador, arquivo in enumerate(arquivos_pdf, start=1):
            try:
                # Clicar no link do arquivo PDF
                arquivo.click()
                time.sleep(2)  # Esperar a nova aba carregar

                # Alternar para a nova aba
                navegador.switch_to.window(navegador.window_handles[-1])

                # Salvar o PDF
                salvar_pdf(destino, contador)

                # Fechar a aba atual
                navegador.close()

                # Voltar para a aba original
                navegador.switch_to.window(navegador.window_handles[0])
            except Exception as e:
                print(f"Erro ao clicar no arquivo: {e}")
    
    except Exception as e:
        print(f"Ocorreu um erro: {e}")
    finally:
        navegador.quit()

if __name__ == "__main__":
    main()

